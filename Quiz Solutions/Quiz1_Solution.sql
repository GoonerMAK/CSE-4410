-- DDLs and Insertions taken from Ayesha

drop table GRADES CASCADE CONSTRAINTS;
drop table COURSES CASCADE CONSTRAINTS;
drop table transactions CASCADE CONSTRAINTS;
drop table STUDENTS CASCADE CONSTRAINTS;
DROP table ACCOUNT CASCADE CONSTRAINTS;

CREATE TABLE ACCOUNT(
    ACCOUNTNO NUMBER PRIMARY KEY,
    ACCOUNTHOLDER VARCHAR2(50)
);

CREATE TABLE STUDENTS(
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(50),
    ADDRESS VARCHAR2(100),
    ACCOUNTNO NUMBER,
    FOREIGN KEY (ACCOUNTNO) REFERENCES ACCOUNT(ACCOUNTNO)
);

CREATE TABLE COURSES(
    CID VARCHAR2(10) PRIMARY KEY,
    TITLE VARCHAR2(50),
    CREDIT NUMERIC(5, 0),
    CAT CHAR(2) CHECK ( CAT = '1' OR CAT='0')
);

CREATE TABLE GRADES(
    SID NUMBER,
    CID VARCHAR2(10),
    GRADE VARCHAR2(5),
    PRIMARY KEY (SID, CID),
    FOREIGN KEY (SID) REFERENCES STUDENTS(ID),
    FOREIGN KEY (CID) REFERENCES COURSES(CID)
);

CREATE TABLE TRANSACTIONS(
    ACCNOFROM NUMBER,
    ACCTO NUMBER,
    DATETIME TIMESTAMP,
    AMOUNT NUMERIC(10, 0),
    DESCRIP VARCHAR2(100),
    TTYPE CHAR(2) CHECK(TTYPE = '1' OR TTYPE = '-1'),
    PRIMARY KEY(ACCNOFROM, DATETIME), --assuming it isnt possible for a particular account to perform >1 transaction at the exact moment in time
    FOREIGN KEY(ACCNOFROM) REFERENCES ACCOUNT(ACCOUNTNO)
);


--inserting nawsheen's dataset for each table

--accounts
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1006, 'Emily Davis');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1007, 'Michael Brown');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1008, 'Olivia Garcia');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1009, 'William Thompson');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1010, 'Ava Rodriguez');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1001, 'John Smith');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1002, 'Jane Doe');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1003, 'Bob Johnson');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1004, 'Samantha Lee');
INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTHOLDER) VALUES (1005, 'Tom Wilson');

--students
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (5678, 'Jocelyn Nguyen', '123 Main St, Anytown USA', 1001);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (2345, 'Brayden Rivera', '456 Elm St, Anytown USA', 1002);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (7890, 'Nadia Patel', '789 Oak St, Anytown USA', 1003);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (4567, 'Milo Perez', '234 Maple Ave, Anytown USA', 1004);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (3456, 'Jazmin Robinson', '567 Pine St, Anytown USA', 1005);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (8901, 'Cruz Phillips', '890 Oak St, Anytown USA', 1007);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (1234, 'Scarlet Edwards', '123 Main St, Anytown USA', 1008);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (6789, 'Phoenix Ramirez', '456 Elm St, Anytown USA', 1009);
INSERT INTO STUDENTS (ID, NAME, ADDRESS, ACCOUNTNO) VALUES (9012, 'Elliott Cooper', '789 Oak St, Anytown USA', 1010);

--courses
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS101', 'Introduction to Computer Science', 3, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('MA301', 'Linear Algebra', 3, '0');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS103', 'Data Structures and Algorithms', 4, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('ST401', 'Probability Theory', 3, '0');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS104', 'Artificial Intelligence', 3, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS105', 'Web Development', 3, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS106', 'Human-Computer Interaction', 3, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('PH401', 'Quantum Mechanics', 4, '0');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS107', 'Operating Systems', 4, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('MG501', 'Organizational Behavior', 3, '0');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS108', 'Computer Networks', 4, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS109', 'Programming Languages', 3, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS110', 'Computer Graphics', 3, '1');
INSERT INTO COURSES (CID, TITLE, CREDIT, CAT) VALUES ('CS111', 'Compiler Design', 4, '1');


--grades
INSERT INTO GRADES (SID, CID, GRADE) VALUES (5678, 'CS103', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (5678, 'CS104', 'C');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (5678, 'CS107', 'A');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (5678, 'CS108', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'MA301', 'C');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'CS103', 'D');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'CS105', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'CS107', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'CS109', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (7890, 'CS103', 'C');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (7890, 'ST401', 'D');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (7890, 'PH401', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (7890, 'CS107', 'C');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (4567, 'CS104', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (4567, 'CS107', 'D');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (4567, 'CS108', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (4567, 'CS110', 'A');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (4567, 'CS111', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'CS105', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'CS106', 'A');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'MG501', 'B');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'CS108', 'C');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'CS109', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (8901, 'CS103', 'C');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (8901, 'CS105', 'A');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (8901, 'CS106', 'A');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'ST401', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'PH401', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (2345, 'MG501', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (4567, 'CS109', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'MA301', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (3456, 'PH401', 'F');
INSERT INTO GRADES (SID, CID, GRADE) VALUES (8901, 'ST401', 'F');

-- function

CREATE OR REPLACE PROCEDURE calculate_fees AS
  -- cursor to fetch all students who failed in some subject(s)
  CURSOR failed_students_cur IS
    SELECT s.ID, COUNT(*) as num_failures, SUM(CASE WHEN c.CAT = '1' THEN 1 ELSE 0 END) as num_theory_failures, SUM(CASE WHEN c.CAT = '0' THEN 1 ELSE 0 END) as num_lab_failures
    FROM STUDENTS s, GRADES g, COURSES c
    WHERE s.ID = g.SID
    AND g.CID = c.CID
    AND g.GRADE IN ('F', 'f')
    GROUP BY s.ID;
  
  -- variables to store the amount to be paid by each student
  v_amount_to_pay NUMBER(10, 0);
  v_accountno NUMBER;
  
BEGIN
    -- loop through all failed students
    FOR failures IN failed_students_cur 
    LOOP     
       -- calculate the amount to be paid
       v_amount_to_pay := 75 * (CASE WHEN failures.num_theory_failures > 2 THEN failures.num_theory_failures ELSE 0 END) + 50 * failures.num_lab_failures;
       DBMS_OUTPUT.PUT_LINE('Student ' || failures.ID || ' needs to pay ' || v_amount_to_pay || ' dollars for ' || failures.num_theory_failures || ' theory failures and ' || failures.num_lab_failures || ' lab failures.');
       
       -- get the account number for the student
       SELECT ACCOUNTNO INTO v_accountno FROM STUDENTS
       WHERE ID = failures.ID;
       
       -- add the transaction to the TRANSACTIONS table
       INSERT INTO TRANSACTIONS (ACCNOFROM, ACCTO, DATETIME, AMOUNT, DESCRIP, TTYPE)
       VALUES (v_accountno, 101, sysdate, v_amount_to_pay, 'Fee for failed subjects', '1');
   
    END LOOP;
END;
/


--test the procedure

BEGIN
    calculate_fees();
END;
/

